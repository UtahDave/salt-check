Unit tests to create:  a unit test for each piece of functionality - make this very solid and dependable

Assertions to support:
assertEqual
assertNotEqual
assertTrue
assertFalse
assertIsNone
assertIsNotNone
assertIn
assertNotIn
assertGreater
assertGreaterEqual
assertLess
assertLessEqual
assertItemsEqual
assertDictContainsSubset

Salt interfaces to support by way of pass-through to the salt interface directly:
salt (standard minion call)
salt (over ssh)
salt-call

Ability to save run output to a named file
Ability to test multiple tests via command line file
Ability to walk an entire file tree (given a dir to start in) and run all tests

Input files are yaml, using the parameters of any given salt module

Example tests for commonly used scenarios e.g.:
package installed
service running
file contents or contains, permissions and etc
process listening on a particular port
Specific useful example tests to provide:  apache, php + ini files and libraries


Consider running tests as groups for an increase in speed

Consider adding an optional timeout flag to increase timeout thresholds 

Once code is feature complete it will be converted to a pip intallable format and pep8 syntax formatted

Order test output alphabetically for predictable output
e.g   test-a, test-b, test-c  

Default output: text & terse (total pass/fail and output of failed tests)
Optional outputs:  yaml, jinja
Optional verbosity: verbose (all data)



